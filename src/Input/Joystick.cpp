#include "Joystick.h"
#include <Arduino.h>

void Joystick::begin() {
    pinMode(config.JOYSTICK_X_PIN, INPUT);
    pinMode(config.JOYSTICK_Y_PIN, INPUT);
    pinMode(config.JOYSTICK_BUTTON_PIN, INPUT_PULLUP);
    
    // –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    calibrate();
}

void Joystick::calibrate() {
    Serial.println("üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞...");
    delay(100);
    
    xCenter = 0;
    yCenter = 0;
    
    // –£—Å—Ä–µ–¥–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
    for(int i = 0; i < 10; i++) {
        xCenter += analogRead(config.JOYSTICK_X_PIN);
        yCenter += analogRead(config.JOYSTICK_Y_PIN);
        delay(10);
    }
    
    xCenter /= 10;
    yCenter /= 10;
    
    calibrated = true;
    Serial.printf("‚úÖ –¶–µ–Ω—Ç—Ä: X=%d, Y=%d\n", xCenter, yCenter);
}

void Joystick::update() {
    if (!calibrated) return;
    
    // –ß—Ç–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Å–µ–π
    int rawX = readFilteredAnalog(config.JOYSTICK_X_PIN);
    int rawY = readFilteredAnalog(config.JOYSTICK_Y_PIN);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω -512 –¥–æ +512
    currentData.xAxis = constrain(map(rawX, 0, 4095, -512, 512), -512, 512);
    currentData.yAxis = constrain(map(rawY, 0, 4095, -512, 512), -512, 512);
    
    // –ß—Ç–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    currentData.buttonPressed = !digitalRead(config.JOYSTICK_BUTTON_PIN);
    
    // –†–∞—Å—á–µ—Ç CRC
    currentData.crc = calculateCRC(currentData);
}

int Joystick::readFilteredAnalog(uint8_t pin) {
    // –ü—Ä–æ—Å—Ç–æ–π –º–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 3x
    int readings[3];
    for(int i = 0; i < 3; i++) {
        readings[i] = analogRead(pin);
        delay(2);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º –¥–ª—è –º–µ–¥–∏–∞–Ω—ã (–∑–∞–º–µ–Ω–∞ swap)
    for(int i = 0; i < 2; i++) {
        for(int j = 0; j < 2 - i; j++) {
            if(readings[j] > readings[j+1]) {
                // –†—É—á–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π (–∞–Ω–∞–ª–æ–≥ swap)
                int temp = readings[j];
                readings[j] = readings[j+1];
                readings[j+1] = temp;
            }
        }
    }
    
    return readings[1]; // –ú–µ–¥–∏–∞–Ω–∞
}

ControlData Joystick::getData() {
    return currentData;
}

uint16_t Joystick::calculateCRC(const ControlData& data) {
    // –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
    uint16_t crc = 0;
    const uint8_t* bytes = (const uint8_t*)&data;
    
    for(size_t i = 0; i < sizeof(ControlData) - sizeof(uint16_t); i++) {
        crc += bytes[i];
    }
    return crc;
}

bool Joystick::isConnected() {
    return calibrated && 
           analogRead(config.JOYSTICK_X_PIN) > 0 && 
           analogRead(config.JOYSTICK_Y_PIN) > 0;
}