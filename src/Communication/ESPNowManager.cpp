#include "ESPNowManager.h"
#include <Arduino.h>

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä
ESPNowManager* ESPNowManager::instance = nullptr;

void ESPNowManager::begin() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è callback
    instance = this;
    
    WiFi.mode(WIFI_STA);
    
    if (esp_now_init() != ESP_OK) {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESP-NOW");
        lastError = ESP_ERR_ESPNOW_NOT_INIT;
        return;
    }
    
    esp_now_register_send_cb(onDataSentStatic);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏
    esp_now_set_pmk((uint8_t*)"rc_car_pmk_key_1234");
    
    Serial.println("‚úÖ ESP-NOW –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    lastError = ESP_OK;
}

bool ESPNowManager::sendData(const ControlData& data) {
    if (!paired) {
        Serial.println("‚ö†Ô∏è  –ü—Ä–∏–µ–º–Ω–∏–∫ –Ω–µ —Å–ø–∞—Ä–µ–Ω");
        lastError = ESP_ERR_ESPNOW_NOT_FOUND;
        return false;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ (50 Hz)
    if (millis() - lastSendTime < 20) {
        return false;
    }
    
    esp_err_t result = esp_now_send(receiverMac, (uint8_t*)&data, sizeof(data));
    lastSendTime = millis();
    sentCount++;
    
    if (result != ESP_OK) {
        Serial.print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ");
        Serial.println(result);
        lastError = result;
        errorCount++;
        return false;
    }
    
    lastError = ESP_OK;
    return true;
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π callback, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
void ESPNowManager::onDataSentStatic(const uint8_t* mac, esp_now_send_status_t status) {
    if (instance != nullptr) {
        instance->onDataSent(mac, status);
    }
}

// –ù–µ—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–ª–µ–Ω–∞–º –∫–ª–∞—Å—Å–∞
void ESPNowManager::onDataSent(const uint8_t* mac, esp_now_send_status_t status) {
    if (status == ESP_NOW_SEND_SUCCESS) {
        // –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        digitalWrite(2, HIGH);
        delay(5);
        digitalWrite(2, LOW);
        successCount++;
        lastError = ESP_OK;
    } else {
        Serial.print("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ");
        Serial.println(status);
        lastError = status;
    }
}

bool ESPNowManager::addPeer(const uint8_t* mac) {
    if (paired) {
        removePeer();
    }
    
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, mac, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    
    esp_err_t result = esp_now_add_peer(&peerInfo);
    if (result == ESP_OK) {
        memcpy(receiverMac, mac, 6);
        paired = true;
        Serial.println("‚úÖ –ü–∏–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω");
        lastError = ESP_OK;
        return true;
    } else {
        Serial.print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏–∞—Ä–∞: ");
        Serial.println(result);
        lastError = result;
        return false;
    }
}

bool ESPNowManager::removePeer() {
    if (!paired) return true;
    
    esp_err_t result = esp_now_del_peer(receiverMac);
    if (result == ESP_OK) {
        paired = false;
        memset(receiverMac, 0, 6);
        Serial.println("‚úÖ –ü–∏–∞—Ä —É–¥–∞–ª–µ–Ω");
        lastError = ESP_OK;
        return true;
    }
    lastError = result;
    return false;
}

bool ESPNowManager::isConnected() {
    return paired;
}

void ESPNowManager::pairWithReceiver() {
    Serial.println("üîç –†–µ–∂–∏–º —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è...");
    // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ
}

void ESPNowManager::setReceiverMAC(const uint8_t* mac) {
    memcpy(receiverMac, mac, 6);
}

float ESPNowManager::getSuccessRate() const {
    if (sentCount == 0) return 0.0f;
    return (float(successCount) / float(sentCount)) * 100.0f;
} 