// –ü–£–õ–¨–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø (–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫)
#include <esp_now.h>
#include <WiFi.h>
#include "Core/Types.h"
#include "Input/Joystick.h"

Joystick joystick;

// MAC –∞–¥—Ä–µ—Å —Å–∞–º–æ–ª–µ—Ç–∞ (–ø—Ä–∏–µ–º–Ω–∏–∫–∞)
uint8_t receiverMac[] = {0xEC, 0xE3, 0x34, 0x1A, 0xB1, 0xA8};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞ –≤ ESP-NOW
bool addPeer(const uint8_t* macAddress) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, macAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    
    esp_err_t result = esp_now_add_peer(&peerInfo);
    if (result == ESP_OK) {
        Serial.println("‚úÖ –ü–∏—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω");
        return true;
    } else {
        Serial.printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞: %d\n", result);
        return false;
    }
}

void printDeviceInfo() {
  Serial.println("üéÆ ===== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–£–õ–¨–¢–ê =====");
  Serial.print("MAC –∞–¥—Ä–µ—Å: ");
  Serial.println(WiFi.macAddress());
  Serial.print("Chip ID: 0x");
  Serial.println(ESP.getEfuseMac(), HEX);
  Serial.print("–ß–∞—Å—Ç–æ—Ç–∞ CPU: ");
  Serial.print(ESP.getCpuFreqMHz());
  Serial.println(" MHz");
  Serial.print("Flash —Ä–∞–∑–º–µ—Ä: ");
  Serial.print(ESP.getFlashChipSize() / (1024 * 1024));
  Serial.println(" MB");
  Serial.print("–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: ");
  Serial.print(ESP.getFreeHeap() / 1024);
  Serial.println(" KB");
  Serial.println("================================");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("üéÆ –ó–∞–ø—É—Å–∫ –ø—É–ª—å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");
  
  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  printDeviceInfo();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");
  joystick.begin();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP-NOW –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞
  Serial.println("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP-NOW...");
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESP-NOW");
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ–ª–µ—Ç –∫–∞–∫ –ø–∏—Ä
  Serial.println("‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–ª–µ—Ç–∞...");
  
  if (addPeer(receiverMac)) {
    Serial.print("‚úÖ –°–∞–º–æ–ª–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ");
    for(int i = 0; i < 6; i++) {
      Serial.print(receiverMac[i], HEX);
      if(i < 5) Serial.print(":");
    }
    Serial.println();
  } else {
    Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–ª–µ—Ç");
    return;
  }
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  pinMode(2, OUTPUT);
  for(int i = 0; i < 3; i++) {
    digitalWrite(2, HIGH);
    delay(100);
    digitalWrite(2, LOW);
    delay(100);
  }
  
  Serial.println("üöÄ –ü—É–ª—å—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
  Serial.println("üì° –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∂–æ–π—Å—Ç–∏–∫–æ–≤...");
}

void loop() {
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∂–æ–π—Å—Ç–∏–∫–æ–≤
  joystick.update();
  ControlData data = joystick.getData();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ CRC –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  static uint16_t lastCRC = 0;
  uint16_t currentCRC = joystick.calculateCRC(data);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
  if (currentCRC == data.crc && currentCRC != lastCRC) {
    esp_err_t result = esp_now_send(receiverMac, (uint8_t *)&data, sizeof(data));
    if (result == ESP_OK) {
      // –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      digitalWrite(2, HIGH);
      delay(5);
      digitalWrite(2, LOW);
    } else {
      Serial.printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %d\n", result);
    }
    lastCRC = currentCRC;
  }
  
  // –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 500 –º—Å
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint > 500) {
    Serial.printf("üéÆ –î–∂–æ–π—Å—Ç–∏–∫1: X=%-4d Y=%-4d %s\n", 
                data.xAxis1, data.yAxis1, 
                data.button1 ? "[BTN1]" : "      ");
    Serial.printf("üéÆ –î–∂–æ–π—Å—Ç–∏–∫2: X=%-4d Y=%-4d %s\n", 
                data.xAxis2, data.yAxis2,
                data.button2 ? "[BTN2]" : "      ");
    Serial.printf("üîÑ –î–æ–ø.–∫–Ω–æ–ø–∫–∏: 0x%02X CRC: %04X\n", 
                data.buttons, data.crc);
    
    // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∏—Ä–∞)
    if (esp_now_is_peer_exist(receiverMac)) {
      Serial.println("üì° –°–≤—è–∑—å: –û–ö");
    } else {
      Serial.println("‚ùå –°–≤—è–∑—å: –ù–ï–¢");
    }
    Serial.println("---");
    lastPrint = millis();
  }
  
  // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
  static unsigned long lastBlink = 0;
  if (millis() - lastBlink > 1000) {
    digitalWrite(2, !digitalRead(2));
    lastBlink = millis();
  }
  
  delay(10);
}