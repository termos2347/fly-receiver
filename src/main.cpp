#include "Core/Types.h"
#include "Input/Joystick.h"
#include "Communication/ESPNowManager.h"

Joystick joystick;
ESPNowManager espNow;

// MAC –∞–¥—Ä–µ—Å –ø—Ä–∏–µ–º–Ω–∏–∫–∞
uint8_t receiverMac[] = {0x14, 0x2B, 0x2F, 0xC9, 0x46, 0x88};

void printDeviceInfo() {
  Serial.println("üéÆ ===== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–ï–†–ï–î–ê–¢–ß–ò–ö–ê =====");
  Serial.print("MAC –∞–¥—Ä–µ—Å: ");
  Serial.println(WiFi.macAddress());
  Serial.print("Chip ID: 0x");
  Serial.println(ESP.getEfuseMac(), HEX);
  Serial.print("–ß–∞—Å—Ç–æ—Ç–∞ CPU: ");
  Serial.print(ESP.getCpuFreqMHz());
  Serial.println(" MHz");
  Serial.print("Flash —Ä–∞–∑–º–µ—Ä: ");
  Serial.print(ESP.getFlashChipSize() / (1024 * 1024));
  Serial.println(" MB");
  Serial.println("=====================================");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("üéÆ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞ —Å –¥–≤—É–º—è –¥–∂–æ–π—Å—Ç–∏–∫–∞–º–∏...");
  
  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  printDeviceInfo();
  
  joystick.begin();
  espNow.begin();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–µ–º–Ω–∏–∫ –∫–∞–∫ –ø–∏–∞—Ä
  Serial.println("‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–Ω–∏–∫–∞...");
  
  if (espNow.addPeer(receiverMac)) {
    Serial.print("‚úÖ –ü—Ä–∏–µ–º–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ");
    for(int i = 0; i < 6; i++) {
      Serial.print(receiverMac[i], HEX);
      if(i < 5) Serial.print(":");
    }
    Serial.println();
  } else {
    Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º–Ω–∏–∫");
    Serial.println("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MAC-–∞–¥—Ä–µ—Å –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
  }
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  pinMode(2, OUTPUT);
  for(int i = 0; i < 3; i++) {
    digitalWrite(2, HIGH);
    delay(100);
    digitalWrite(2, LOW);
    delay(100);
  }
  
  Serial.println("üöÄ –ü–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
  if (espNow.isConnected()) {
    Serial.println("üì° –°–≤—è–∑—å —Å –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
  } else {
    Serial.println("‚ö†Ô∏è  –°–≤—è–∑—å —Å –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
  }
  Serial.println("üìä –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∂–æ–π—Å—Ç–∏–∫–æ–≤...");
}

void loop() {
  joystick.update();
  ControlData data = joystick.getData();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ CRC –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  static uint16_t lastCRC = 0;
  uint16_t currentCRC = joystick.calculateCRC(data);
  
  if (currentCRC == data.crc && currentCRC != lastCRC) {
    espNow.sendData(data);
    lastCRC = currentCRC;
  }
  
  // –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 500 –º—Å
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint > 500) {
    Serial.printf("üéÆ –î–∂–æ–π—Å—Ç–∏–∫1: X=%-4d Y=%-4d %s\n", 
                data.xAxis1, data.yAxis1, 
                data.button1 ? "[BTN1]" : "      ");
    Serial.printf("üéÆ –î–∂–æ–π—Å—Ç–∏–∫2: X=%-4d Y=%-4d %s\n", 
                data.xAxis2, data.yAxis2,
                data.button2 ? "[BTN2]" : "      ");
    Serial.printf("üîÑ –î–æ–ø.–∫–Ω–æ–ø–∫–∏: 0x%02X CRC: %04X\n", 
                data.buttons, data.crc);
    Serial.println("---");
    lastPrint = millis();
  }
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã (–º–µ–¥–ª–µ–Ω–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ)
  static unsigned long lastBlink = 0;
  if (millis() - lastBlink > 1000) {
    digitalWrite(2, !digitalRead(2));
    lastBlink = millis();
  }
  
  delay(10);
}