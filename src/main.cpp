// –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫
#include <esp_now.h>
#include <WiFi.h>

struct ControlData {
  int16_t throttle = 0;
  int16_t rudder = 0;
  int16_t elevator = 0;
  int16_t ailerons = 0;
  bool buttonPressed = false;
};

// MAC –ø—Ä–∏–µ–º–Ω–∏–∫–∞ (—Å–∞–º–æ–ª–µ—Ç–∞)
uint8_t receiverMac[] = {0x14, 0x2B, 0x2F, 0xC9, 0x46, 0x88};

#define BUTTON_PIN 4
#define LED_PIN 2

ControlData controlData;
bool receiverConfigured = false;
unsigned long lastSendTime = 0;
int errorCount = 0;

void printMacAddress() {
  Serial.println("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–î–ê–¢–ß–ò–ö–ê ===");
  Serial.print("MAC –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞: ");
  Serial.println(WiFi.macAddress());
  Serial.print("MAC –ø—Ä–∏–µ–º–Ω–∏–∫–∞: ");
  for (int i = 0; i < 6; i++) {
    Serial.print(receiverMac[i], HEX);
    if (i < 5) Serial.print(":");
  }
  Serial.println();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Wi-Fi —Ä–µ–∂–∏–º
  Serial.print("Wi-Fi —Ä–µ–∂–∏–º: ");
  Serial.println(WiFi.getMode());
  Serial.println("=================================");
}

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  if (status == ESP_NOW_SEND_SUCCESS) {
    digitalWrite(LED_PIN, HIGH);
    Serial.println("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞");
    errorCount = 0;
  } else {
    errorCount++;
    Serial.print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ #");
    Serial.println(errorCount);
    digitalWrite(LED_PIN, HIGH);
  }
  delay(50);
  digitalWrite(LED_PIN, LOW);
}

bool setupReceiver() {
  Serial.println("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø—Ä–∏–µ–º–Ω–∏–∫...");
  
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, receiverMac, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  
  // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–∏—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
  for (int i = 0; i < 3; i++) {
    if (esp_now_add_peer(&peerInfo) == ESP_OK) {
      receiverConfigured = true;
      Serial.println("‚úÖ –ü—Ä–∏–µ–º–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
      return true;
    }
    delay(100);
  }
  
  Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–µ–º–Ω–∏–∫");
  return false;
}

void setup() {
  Serial.begin(115200);
  delay(1000); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Serial
  
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  Serial.println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞...");
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Wi-Fi
  WiFi.mode(WIFI_STA);
  Serial.println("Wi-Fi –≤ —Ä–µ–∂–∏–º–µ STA");
  
  printMacAddress();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP-NOW
  Serial.println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP-NOW...");
  esp_err_t result = esp_now_init();
  
  if (result != ESP_OK) {
    Serial.print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESP-NOW: ");
    Serial.println(result);
    
    // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    Serial.println("–ü—Ä–æ–±—É—é –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...");
    delay(1000);
    result = esp_now_init();
    
    if (result != ESP_OK) {
      Serial.println("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ESP-NOW");
      return;
    }
  }
  
  Serial.println("‚úÖ ESP-NOW –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  
  esp_now_register_send_cb(OnDataSent);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–µ–º–Ω–∏–∫–∞
  if (setupReceiver()) {
    Serial.println("üîÑ –ü–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    
    // –ë—ã—Å—Ç—Ä–æ –º–∏–≥–∞–µ–º 3 —Ä–∞–∑–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    for (int i = 0; i < 3; i++) {
      digitalWrite(LED_PIN, HIGH);
      delay(100);
      digitalWrite(LED_PIN, LOW);
      delay(100);
    }
  }
}

void loop() {
  if (receiverConfigured) {
    if (millis() - lastSendTime > 100) { // 10 Hz –≤–º–µ—Å—Ç–æ 20 Hz –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      lastSendTime = millis();
      
      // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      controlData.throttle = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å 0 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      controlData.rudder = 0;
      controlData.elevator = 0;
      controlData.ailerons = 0;
      controlData.buttonPressed = !digitalRead(BUTTON_PIN);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      esp_err_t result = esp_now_send(receiverMac, (uint8_t *)&controlData, sizeof(controlData));
      
      if (result != ESP_OK) {
        Serial.print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ");
        Serial.println(result);
      }
      
      // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
      static int sendCount = 0;
      sendCount++;
      if (sendCount % 10 == 0) {
        Serial.print("–û—Ç–ø—Ä–∞–≤–æ–∫: ");
        Serial.print(sendCount);
        Serial.print(", –û—à–∏–±–æ–∫: ");
        Serial.println(errorCount);
      }
    }
  } else {
    // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–µ–º–Ω–∏–∫
    if (millis() % 5000 == 0) {
      Serial.println("–ü—Ä–æ–±—É—é –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...");
      setupReceiver();
    }
  }
  
  delay(10);
}