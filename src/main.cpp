// –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫
#include "Core/Types.h"
#include "Input/Joystick.h"
#include "Communication/ESPNowManager.h"

Joystick joystick;
ESPNowManager espNow;

// MAC –∞–¥—Ä–µ—Å –ø—Ä–∏–µ–º–Ω–∏–∫–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è)
uint8_t receiverMac[] = {0x14, 0x2B, 0x2F, 0xC9, 0x46, 0x88};

void printDeviceInfo() {
  Serial.println("üéÆ ===== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–ï–†–ï–î–ê–¢–ß–ò–ö–ê =====");
  Serial.print("MAC –∞–¥—Ä–µ—Å: ");
  Serial.println(WiFi.macAddress());
  Serial.print("Chip ID: 0x");
  Serial.println(ESP.getEfuseMac(), HEX);
  Serial.print("–ß–∞—Å—Ç–æ—Ç–∞ CPU: ");
  Serial.print(ESP.getCpuFreqMHz());
  Serial.println(" MHz");
  Serial.print("Flash —Ä–∞–∑–º–µ—Ä: ");
  Serial.print(ESP.getFlashChipSize() / (1024 * 1024));
  Serial.println(" MB");
  Serial.println("=====================================");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("üéÆ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞...");
  
  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  printDeviceInfo();
  
  joystick.begin();
  espNow.begin();
  
  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Ä—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ MAC –ø—Ä–∏–µ–º–Ω–∏–∫–∞
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∂–∏–º —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è
  Serial.println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ MAC –ø—Ä–∏–µ–º–Ω–∏–∫–∞...");
  Serial.println("üìù –§–æ—Ä–º–∞—Ç: 14:2B:2F:C9:46:88");
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–≤–æ–¥–∞ MAC —á–µ—Ä–µ–∑ Serial
  // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π MAC
  if (receiverMac[0] == 0x00) {
    Serial.println("‚ùå MAC –ø—Ä–∏–µ–º–Ω–∏–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
    Serial.println("‚ö†Ô∏è  –ó–∞–º–µ–Ω–∏—Ç–µ receiverMac –≤ –∫–æ–¥–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π MAC");
  } else {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, receiverMac, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    
    if (esp_now_add_peer(&peerInfo) == ESP_OK) {
      Serial.print("‚úÖ –ü—Ä–∏–µ–º–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ");
      for(int i = 0; i < 6; i++) {
        Serial.print(receiverMac[i], HEX);
        if(i < 5) Serial.print(":");
      }
      Serial.println();
    } else {
      Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–µ–º–Ω–∏–∫–∞");
    }
  }
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  pinMode(2, OUTPUT);
  for(int i = 0; i < 3; i++) {
    digitalWrite(2, HIGH);
    delay(100);
    digitalWrite(2, LOW);
    delay(100);
  }
  
  Serial.println("üöÄ –ü–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
  Serial.println("üìä –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∂–æ–π—Å—Ç–∏–∫–∞...");
}

void loop() {
  joystick.update();
  ControlData data = joystick.getData();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ CRC –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  static uint16_t lastCRC = 0;
  uint16_t currentCRC = joystick.calculateCRC(data);
  
  if (currentCRC == data.crc && currentCRC != lastCRC) {
    espNow.sendData(data);
    lastCRC = currentCRC;
  }
  
  // –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 500 –º—Å
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint > 500) {
    Serial.printf("üì§ X: %4d, Y: %4d, BTN: %d, CRC: %04X\n", 
                 data.xAxis, data.yAxis, data.buttonPressed, data.crc);
    lastPrint = millis();
  }
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã (–º–µ–¥–ª–µ–Ω–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ)
  static unsigned long lastBlink = 0;
  if (millis() - lastBlink > 1000) {
    digitalWrite(2, !digitalRead(2));
    lastBlink = millis();
  }
  
  delay(10);
}